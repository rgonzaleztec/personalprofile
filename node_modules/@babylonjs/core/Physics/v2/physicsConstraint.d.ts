import type { Scene } from "../../scene";
import type { Vector3 } from "../../Maths/math.vector";
import type { IPhysicsEnginePluginV2, ConstraintAxis, PhysicsConstraintParameters, ConstraintAxisLimitMode, ConstraintMotorType } from "./IPhysicsEnginePlugin";
import { ConstraintType } from "./IPhysicsEnginePlugin";
import type { PhysicsBody } from "./physicsBody";
/**
 * This is a holder class for the physics constraint created by the physics plugin
 * It holds a set of functions to control the underlying constraint
 * @see https://doc.babylonjs.com/features/featuresDeepDive/physics/usingPhysicsEngine
 */
export declare class PhysicsConstraint {
    /**
     * V2 Physics plugin private data for a physics material
     */
    _pluginData: any;
    /**
     * The V2 plugin used to create and manage this Physics Body
     */
    protected _physicsPlugin: IPhysicsEnginePluginV2;
    /**
     * Constructs a new constraint for the physics constraint.
     * @param type The type of constraint to create.
     * @param options The options for the constraint.
     * @param scene The scene the constraint belongs to.
     *
     * This code is useful for creating a new constraint for the physics engine. It checks if the scene has a physics engine, and if the plugin version is correct.
     * If all checks pass, it initializes the constraint with the given type and options.
     */
    constructor(type: ConstraintType, options: PhysicsConstraintParameters, scene: Scene);
    /**
     * Sets the parent body of this body.
     * @param body - The parent body to set.
     *
     * This method is useful for setting the parent body of a physics body in a physics engine.
     * This allows the engine to accurately simulate the motion of the body in relation to its parent body.
     * For example, if the parent body is a planet, the engine can accurately simulate the motion of the body in relation to the planet's gravity.
     */
    setParentBody(body: PhysicsBody): void;
    /**
     * Retrieves the parent body of the current physics constraint.
     *
     * @returns The parent body of the current physics constraint, or `undefined` if the
     * current constraint does not have a parent body.
     */
    getParentBody(): PhysicsBody | undefined;
    /**
     * Sets the child body of the current body.
     *
     * @param body - The child body to set.
     *
     * This method is useful for setting the child body of the current body in a physics engine.
     * This allows for the creation of complex structures of bodies that interact with each other in a realistic way.
     */
    setChildBody(body: PhysicsBody): void;
    /**
     * Retrieves the child body of the current physics constraint.
     *
     * @returns The child body of the current physics constraint, or `undefined` if no
     * child body is present.
     */
    getChildBody(): PhysicsBody | undefined;
    /**
     *
     * @param pivot +
     * @param axisX
     * @param axisY
     */
    setAnchorInParent(pivot: Vector3, axisX: Vector3, axisY: Vector3): void;
    /**
     *
     * @param pivot
     * @param axisX
     * @param axisY
     */
    setAnchorInChild(pivot: Vector3, axisX: Vector3, axisY: Vector3): void;
    /**
     *
     * @param isEnabled
     */
    setEnabled(isEnabled: boolean): void;
    /**
     *
     * @returns
     */
    getEnabled(): boolean;
    /**
     *
     * @param isEnabled
     */
    setCollisionsEnabled(isEnabled: boolean): void;
    /**
     *
     * @returns
     */
    getCollisionsEnabled(): boolean;
    /**
     *
     * @param axis
     * @param friction
     */
    setAxisFriction(axis: ConstraintAxis, friction: number): void;
    /**
     *
     * @param axis
     * @returns
     */
    getAxisFriction(axis: ConstraintAxis): number;
    /**
     *
     * @param axis
     * @param limitMode
     */
    setAxisMode(axis: ConstraintAxis, limitMode: ConstraintAxisLimitMode): void;
    /**
     *
     * @param axis
     */
    getAxisMode(axis: ConstraintAxis): ConstraintAxisLimitMode;
    /**
     *
     */
    setAxisMinLimit(axis: ConstraintAxis, minLimit: number): void;
    /**
     *
     */
    getAxisMinLimit(axis: ConstraintAxis): number;
    /**
     *
     */
    setAxisMaxLimit(axis: ConstraintAxis, limit: number): void;
    /**
     *
     */
    getAxisMaxLimit(axis: ConstraintAxis): number;
    /**
     *
     */
    setAxisMotorType(axis: ConstraintAxis, motorType: ConstraintMotorType): void;
    /**
     *
     */
    getAxisMotorType(axis: ConstraintAxis): ConstraintMotorType;
    /**
     *
     */
    setAxisMotorTarget(axis: ConstraintAxis, target: number): void;
    /**
     *
     */
    getAxisMotorTarget(axis: ConstraintAxis): number;
    /**
     *
     */
    setAxisMotorMaxForce(axis: ConstraintAxis, maxForce: number): void;
    /**
     *
     */
    getAxisMotorMaxForce(axis: ConstraintAxis): number;
    /**
     *
     */
    dispose(): void;
}
/**
 *
 */
/** @internal */
export declare class PhysicsConstraintBallAndSocket extends PhysicsConstraint {
    /** @internal */
    constructor(pivotA: Vector3, pivotB: Vector3, axisA: Vector3, axisB: Vector3, scene: Scene);
}
/**
 *
 */
/** @internal */
export declare class PhysicsConstraintDistance extends PhysicsConstraint {
    /** @internal */
    constructor(pivotA: Vector3, pivotB: Vector3, axisA: Vector3, axisB: Vector3, scene: Scene);
}
/**
 *
 */
/** @internal */
export declare class PhysicsConstraintHinge extends PhysicsConstraint {
    /** @internal */
    constructor(pivotA: Vector3, pivotB: Vector3, axisA: Vector3, axisB: Vector3, scene: Scene);
}
/**
 *
 */
/** @internal */
export declare class PhysicsConstraintSlider extends PhysicsConstraint {
    /** @internal */
    constructor(pivotA: Vector3, pivotB: Vector3, axisA: Vector3, axisB: Vector3, scene: Scene);
}
/**
 *
 */
/** @internal */
export declare class PhysicsConstraintLock extends PhysicsConstraint {
    /** @internal */
    constructor(pivotA: Vector3, pivotB: Vector3, axisA: Vector3, axisB: Vector3, scene: Scene);
}
